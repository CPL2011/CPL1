TODO's
____________

SCALA: 
- class Graph, Node, Edge: functionality = (add Node, remove Node, add Edge, remove Edge, get Neighbours, 
(undirected edges are represented using two directed edges), get all Nodes, 
traversing the graph: Breadth-first, Depth-first)
- Node, Edge and Graph will use a 'visualization' trait to provide the Ubigraph functionality
- Simulation Engine: ...?

XML: 
- loading and storing...db4o? GraphML GEXP? get feedback

INSTALL UBIGRAPH:
http://ubietylab.net/ubigraph/content/Docs/index.html#languagebindings (Java)
(install apache-xmlrpc-3.1.3 and UbiGraph-alpa-0.2.4-Linux32-Debian-4)


IN PROGRESS
_____________
- the db4o storage still does not work properly and I probably do not have the time today/tomorrow to fix it... 
The problem is that db4o does not store the references that are stored in the graph object. I tried the config
method, but it did not work.



DONE
_____________
- Most basic functionality has been provided but things might still have to be refactored into different classes/traits 
(for 'traversing' check the ideas below, for visualizing the graph, a more robust strategy might be neat)
- trait 'infectable'



IDEAS
_____________
I kind of don't like how the neighbours/nodes are managed in our graph. Now we keep the neighbour nodes in each node 
and we keep the edges(that also contain nodes) in the graph. This is double the work. I would only keep edges to neighbours in the 
Node, so the graph only has a map of nodes. However it could be that the way it is now implemented was done for
a specific reason, so then you can ignore this...

Splitting the code into different files was an excellent decision. It had to happen sooner or later.

We can use an itterator pattern to implement different traversing strategy's.
---> Yea, we'll have to choose whether to implement using scala library traits Iterator or Traversable. 
---> I believe the assignment is hinting towards the use of Traversable. Adapting the code should be easy,
---> creating a wrapper class extending the trait and copying the foreach (currently called traverse) implementation.

For those like me already having an eclipse on there windows pc.
You can run an Ubigraph App in your familiar environment while outputting to the Linux Ubigraph Server.
The only thing you have to change is adding some libraries and:
UbigraphClient graph = new UbigraphClient("http://<LinuxUbigraphServer>:20738/RPC2");
It's working great so far :p