TODO's
____________

SCALA: 
- class Graph, Node, Edge: functionality = (add Node, remove Node, add Edge, remove Edge, get Neighbours, 
(undirected edges are represented using two directed edges), get all Nodes, 
traversing the graph: Breadth-first, Depth-first)
- Node, Edge and Graph will use a 'visualization' trait to provide the Ubigraph functionality
- Simulation Engine: ...?

XML: 
- loading and storing...db4o? GraphML GEXP? get feedback

INSTALL UBIGRAPH:
http://ubietylab.net/ubigraph/content/Docs/index.html#languagebindings (Java)
(install apache-xmlrpc-3.1.3 and UbiGraph-alpa-0.2.4-Linux32-Debian-4)


IN PROGRESS
_____________





DONE
_____________




IDEAS
_____________

We can use an itterator pattern to implement different traversing strategy's.

For those like me already having an eclipse on there windows pc.
You can run an Ubigraph App in your familiar environment while outputting to the Linux Ubigraph Server.
The only thing you have to change is adding some libraries and:
UbigraphClient graph = new UbigraphClient("http://<LinuxUbigraphServer>:20738/RPC2");
It's working great so far :p
